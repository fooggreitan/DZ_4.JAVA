// 2 Реализуйте очередь с помощью LinkedList со следующими методами:
// enqueue() - помещает элемент в конец очереди, dequeue() - возвращает первый элемент из очереди и удаляет его, 
// first() - возвращает первый элемент из очереди, не удаляя

import java.util.LinkedList;
import java.util.Queue;

public class Task2 {
    public static void main(String[] args) {
        Queue<Integer> array = new LinkedList<Integer>();
        array.add(23);
        array.add(3);
        array.add(1);
        array.add(5);
        array.add(6);
        System.out.println("Исходный список: " + "\n" + array);

        enqueue(array);
    }

    private static void enqueue(Queue<Integer> array){
        System.out.println("Список с добавлением элемента: ");
        array.offer(6);
        first(array);
    }

    private static void dequeue(Queue<Integer> array){
        int next = array.remove();
        System.out.println(array);
        System.out.println("Удаленный элемент: " + next);
    }

    private static void first(Queue<Integer> array){
        int ferst = array.peek();
        System.out.println(array);
        System.out.println("Первый элемент списка: " + ferst);
        dequeue(array);
    }
}

// Метод offer() является альтернативным идиоматичным способом добавления элемента в очередь в Java, вместо традиционного метода enqueue().

// Поэтому, хотя использование метода enqueue() для добавления элементов в очередь может 
// быть понятным и логичным в некоторых контекстах, в Java наиболее распространенным и безопасным способом добавления 
// элемента в очередь является использование метода offer().

// В Java метод dequeue() не является частью стандартного интерфейса Queue. 
// Вместо этого, для удаления и возврата следующего элемента из очереди можно использовать метод poll(). Этот метод удаляет 
// и возвращает головной элемент очереди, или возвращает null, если очередь пуста.

// метод poll() для удаления и возврата следующего элемента из очереди на основе связанного 
// списка. Этот код должен работать корректно и напечатать 
// элементы очереди до и после удаления следующего элемента.

// Если вы хотите получить первый элемент из очереди Queue, используйте метод peek() 
// для получения элемента без его удаления, или remove() для удаления и возврата первого элемента.

// Как видно, если очередь не пуста, оба метода работают корректно и возвращают 
// элементы. Однако, когда мы пытаемся удалить элементы из пустой очереди, метод remove() 
// выбрасывает исключение NoSuchElementException, а метод poll() возвращает null.

// В вашем случае, поскольку вы используете метод peek() для получения 
// первого элемента очереди, тип переменной ferst должен быть Object, так 
// как метод peek() возвращает объект типа Object. Но если вам известно, что 
// элементы очереди имеют тип int, и вы не планируете выполнять какую-либо обработку 
// или сравнение с объектами других типов, то переменную можно объявить как int.